- In patterns, we use nested loops
- In nested loops, the outer loop is specifically for the lines (rows) and the inner loops are specifically for the columns

There are 4 rules while solving pattern problems
1. We always use nested loops for printing the patterns. For the outer loop, we count the number of lines/rows and loop for them.
2. Next, for the inner loop, we focus on the number of columns and somehow connect them to the rows by forming a logic such that for each row we get the required number of columns to be printed.
3. We print the ‘*’ inside the inner loop.
4. Observe symmetry in the pattern or check if a pattern is a combination of two or more similar patterns. This step is optional since it doesn't apply to all the patterns

The first pattern that we are solving is:

*****
*****
*****
*****
*****

Solution:

```
for i in range(0,5):
    for j in range(0,5):
        print('*', end="")  # The end="" prevents a newline after each *.
        # j=+1 # This line does not affect the loop behavior because j in the loop is controlled by range(0, 5). The reassignment has no impact on the next iteration.
    print()
    # i=+1 #This does not affect the outer loop because i is controlled by range(0, 5).
```

```
A more dynamic code

def print_pattern(N):
    
    for i in range(N):
        for j in range(N):
            print('*', end="")  # The end="" prevents a newline after each *.
        # j=+1 # This line does not affect the loop behavior because j in the loop is controlled by range(0, 5). The reassignment has no impact on the next iteration.
        print()
    # i=+1 #This does not affect the outer loop because i is controlled by range(0, 5).

print_pattern(3)

```

=================================================================================================================================================================================================================

2. The second pattern we want to solve is as follows

*
**
***
****
*****

Solution:

```
def print_pattern(N):
    
    for i in range(N):
        for j in range(0,i+1):
            print('*', end="")  # The end="" prevents a newline after each *.
        # j=+1 # This line does not affect the loop behavior because j in the loop is controlled by range(0, 5). The reassignment has no impact on the next iteration.
        print()
    # i=+1 #This does not affect the outer loop because i is controlled by range(0, 5).

print_pattern(5)
```

=================================================================================================================================================================================================================

3. The third pattern we want to solve is as follows

1
12
123
1234
12345

Solution:
```
def print_pattern(N):
    
    for i in range(1,N+1):
        for j in range(1,i+1):
            print(j, end="")  # The end="" prevents a newline after each *.
        # j=+1 # This line does not affect the loop behavior because j in the loop is controlled by range(0, 5). The reassignment has no impact on the next iteration.
        print()
    # i=+1 #This does not affect the outer loop because i is controlled by range(0, 5).

print_pattern(5)
```

=================================================================================================================================================================================================================

4. For the 4th pattern on the website the solution is as follows:

```
def print_pattern(N):
    
    for i in range(1,N+1):
        for j in range(1,i+1):
            print(i, end="")  # The end="" prevents a newline after each *.
        # j=+1 # This line does not affect the loop behavior because j in the loop is controlled by range(0, 5). The reassignment has no impact on the next iteration.
        print()
    # i=+1 #This does not affect the outer loop because i is controlled by range(0, 5).

print_pattern(5)
```

=================================================================================================================================================================================================================

5. For the 5th pattern on the website the solution is as follows:

```
def print_pattern(N):
    
    for i in range(N,0,-1):
        for j in range(i):
            print("*", end="")  # The end="" prevents a newline after each *.
        # j=+1 # This line does not affect the loop behavior because j in the loop is controlled by range(0, 5). The reassignment has no impact on the next iteration.
        print()
    # i=+1 #This does not affect the outer loop because i is controlled by range(0, 5).

print_pattern(5)
```

=================================================================================================================================================================================================================

6.
```
def print_pattern(N):
    
    for i in range(N,1,-1):
        for j in range(1,i):
            print(j, end="")  # The end="" prevents a newline after each *.
        # j=+1 # This line does not affect the loop behavior because j in the loop is controlled by range(0, 5). The reassignment has no impact on the next iteration.
        print()
    # i=+1 #This does not affect the outer loop because i is controlled by range(0, 5).

print_pattern(6)
```

=================================================================================================================================================================================================================
